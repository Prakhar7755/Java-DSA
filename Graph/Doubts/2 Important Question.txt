Sure, here are 30 simple and easy DSA questions/programs on graphs in Java:

1. Implement a graph using an adjacency matrix.
2. Implement a graph using an adjacency list.
3. Perform depth-first search (DFS) on a graph.
4. Perform breadth-first search (BFS) on a graph.
5. Check if a graph is cyclic.
6. Find the shortest path between two nodes using BFS.
7. Find the shortest path between two nodes using Dijkstra's algorithm.
8. Find the shortest path between two nodes using Bellman-Ford algorithm.
9. Check if a graph is bipartite.
10. Find the minimum spanning tree (MST) using Kruskal's algorithm.
11. Find the minimum spanning tree (MST) using Prim's algorithm.
12. Count the number of connected components in a graph.
13. Find the articulation points (or cut vertices) in a graph.
14. Find the bridges (or cut edges) in a graph.
15. Check if a graph is a tree.
16. Find all the cycles in a graph.
17. Topologically sort a directed acyclic graph (DAG).
18. Check if a graph contains a Hamiltonian path.
19. Check if a graph contains a Eulerian path.
20. Find all the strongly connected components in a directed graph.
21. Find the diameter of a tree.
22. Find the center(s) of a tree.
23. Check if a graph is planar.
24. Check if a graph is connected.
25. Find the maximum flow in a flow network using Ford-Fulkerson algorithm.
26. Find the maximum bipartite matching in a bipartite graph.
27. Find the minimum cut in a graph.
28. Find the chromatic number of a graph.
29. Find the chromatic polynomial of a graph.
30. Check if a graph is isomorphic to another graph.

Each of these questions/tasks will help you understand different aspects of graph theory and algorithms in Java. Start with the basics and gradually move to more complex problems as you become comfortable. Good luck with your interview preparation!